<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nsuslab.denma.backend.migration.mapper.custard.CustardDataMapper">

    <select id="connectionTest" parameterType="int" resultType="java.util.HashMap">
        select *
        from TOURNEY_INFO
        limit 1
    </select>

    <select id="getCurrencyExchangeRate" parameterType="java.util.HashMap" resultType="java.lang.Long">
        select rate_by_usd
        FROM currency_exchange_rate
        where day_number = #{dayNumber}
        and currency = #{currency}
    </select>

    <insert id="insertTourneyStakingInfo" parameterType="java.util.List">
        insert IGNORE into tourney_staking_info
            (gp_id,
            tourney_id,
            tourney_type,
            timestamp,
            tourney_name,
            nickname,
            brand_Id,
            country_id,
            buy_in,
            fee,
            bounty,
            mark_up,
            sell_ratio,
            sold_ratio,
            sold_amount,
            profit,
            award,
            bounty_award,
            share,
            bounty_share,
            tdollar_award,
            tdollar_share,
            currency,
            integrated_profit
        )
        values
        <foreach item="item" index="index" separator="," collection="list">
            (
                #{item.gp_id},
                #{item.tourney_id},
                #{item.tourney_type},
                #{item.timestamp},
                #{item.tourney_name},
                #{item.nickname},
                #{item.brand_Id},
                #{item.country_id},
                #{item.buy_in},
                #{item.fee},
                #{item.bounty},
                #{item.mark_up},
                #{item.sell_ratio},
                #{item.sold_ratio},
                #{item.sold_amount},
                #{item.profit},
                #{item.award},
                #{item.bounty_award},
                #{item.share},
                #{item.bounty_share},
                #{item.tdollar_award},
                #{item.tdollar_share},
                #{item.currency},
                #{item.integrated_profit}
            )
        </foreach>
    </insert>

    <insert id="insertTourneyStakingAction" parameterType="java.util.List">
        insert IGNORE into tourney_staking_action
            (from_gp_id,
            to_gp_id,
            tourney_id,
            tourney_type,
            is_buy,
            timestamp,
            action_time,
            from_nickname,
            from_brand_id,
            from_country_id,
            to_nickname,
            to_brand_id,
            to_country_id,
            ratio,
            amount,
            reward,
            tdollar_amount,
            tdollar_reward,
            currency,
            integrated_amount,
            integrated_reward
        )
        values
        <foreach item="item" index="index" separator="," collection="list">
            (
                #{item.fromGpId},
                #{item.toGpId},
                #{item.tourneyId},
                #{item.tourneyType},
                #{item.buy},
                #{item.timestamp},
                #{item.actionTime},
                #{item.fromNickName},
                #{item.fromBrandId},
                #{item.fromCountryCode},
                #{item.toNickName},
                #{item.toBrandId},
                #{item.toCountryCode},
                #{item.ratio},
                #{item.amount},
                #{item.reward},
                #{item.tAmount},
                #{item.tReward},
                #{item.currency},
                #{item.integrated_amount},
                #{item.integrated_reward}
            )
        </foreach>
    </insert>

    <insert id="insertTourneyPlayerFinalResult" parameterType="java.util.List">
        insert IGNORE into tourney_player_final_result
            (gp_id,
            tourney_type,
            tourney_id,
            session_id,
            seq,
            award_type,
            final_rank,
            nickname,
            country_id,
            brand_id,
            award_amount,
            award_ticket_template_id,
            award_ticketvalue,
            bounty_prize,
            fortune_spin_multiplier,
            collect_cookie_id,
            extra_cookie_id,
            collect_award_amount,
            settlement_type,
            is_in_the_money,
            is_final_table,
            registered_players,
            currency,
            spin_and_gold_multiplier,
            collect_gold,
            extra_prize_worth,
            extra_award_info,
            integrated_award_amount,
            integrated_bounty_prize
        )
        values
        <foreach item="item" index="index" separator="," collection="list">
            (
                #{item.gpId},
                #{item.tourneyType},
                #{item.tourneyId},
                #{item.sessionId},
                #{item.seq},
                #{item.awardType},
                #{item.finalRank},
                #{item.nickName},
                #{item.countryCode},
                #{item.brandId},
                #{item.awardAmount},
                #{item.awardTicketTemplateId},
                #{item.awardTicketValue},
                #{item.bountyPrize},
                #{item.fortuneSpinMultiplier},
                #{item.collectCookieId},
                #{item.extraCookieId},
                #{item.collectAwardAmount},
                #{item.settlementType},
                #{item.isInTheMoney},
                #{item.isFinalTable},
                #{item.registeredPlayers},
                #{item.currencyString},
                #{item.spinAndGoldMultiplier},
                #{item.collectGold},
                #{item.extraPrizeWorth},
                #{item.extraAwardInfo},
                #{item.integrated_award_amount},
                #{item.integrated_bounty_prize}
            )
        </foreach>
    </insert>

    <insert id="insertHudBoxTourneyTotalWinningTemp" parameterType="java.util.List">
        insert into hud_box_tourney_total_winning_temp
        (
            gp_id,
            award_amount,
            currency,
            day_number
        )
        values
        <foreach item="item" index="index" separator="," collection="list">
            (#{item.GP_ID},
            #{item.AWARD_AMOUNT},
            #{item.CURRENCY},
            0)
        </foreach>
    </insert>

    <insert id="insertHudBoxTourneyTotalWinning" parameterType="java.util.List">
        insert IGNORE into hud_box_tourney_total_winning
        (
            gp_id,
            award_amount,
            currency,
            day_number
        )
        values
        <foreach item="item" index="index" separator="," collection="list">
            (#{item.GP_ID},
            #{item.AWARD_AMOUNT},
            #{item.CURRENCY},
            0)
        </foreach>
    </insert>

    <insert id="insertHudBoxAofJackpotTotalWinningTemp" parameterType="java.util.List">
        insert IGNORE into hud_box_aof_jackpot_total_winning_temp
        (
            gp_id,
            total_amount,
            last_hand_history_id,
            last_hand_amount,
            last_hand_hole_card,
            last_hand_timestamp,
            currency
        ) values
        <foreach item="item" index="index" separator="," collection="list">
        (
            #{item.GP_ID},
            #{item.TOTAL_AMOUNT},
            #{item.LAST_HAND_HISTORY_ID},
            #{item.LAST_HAND_AMOUNT},
            #{item.LAST_HAND_HOLE_CARD},
            #{item.LAST_HAND_TIMESTAMP},
            #{item.CURRENCY}
        )
        </foreach>

    </insert>

    <insert id="insertHudBoxAofJackpotTotalWinning" parameterType="java.util.List">
        insert IGNORE into hud_box_aof_jackpot_total_winning
        (
            gp_id,
            total_amount,
            last_hand_history_id,
            last_hand_amount,
            last_hand_hole_card,
            last_hand_timestamp,
            currency
        ) values
        <foreach item="item" index="index" separator="," collection="list">
        (
            #{item.GP_ID},
            #{item.TOTAL_AMOUNT},
            #{item.LAST_HAND_HISTORY_ID},
            #{item.LAST_HAND_AMOUNT},
            #{item.LAST_HAND_HOLE_CARD},
            #{item.LAST_HAND_TIMESTAMP},
            #{item.CURRENCY}
        )
        </foreach>

    </insert>


    <insert id="insertSpinandgoldChallengeHistoryTemp" parameterType="java.util.List">
        insert IGNORE into spinandgold_challenge_history_temp
        (
            gp_id,
            nick_name,
            brand_id,
            country_code,
            challenge_id,
            challenge_minutes,
            level,
            status,
            start_at,
            finish_at,
            gold_to_success,
            canceled_at,
            completed_at,
            collect_gold,
            is_challenge_success,
            award_type,
            award_currency,
            awarded_money,
            created_at
        ) values
        <foreach item="item" index="index" separator="," collection="list">
            (
                #{item.GP_ID},
                #{item.NICK_NAME},
                #{item.BRAND_ID},
                #{item.COUNTRY_CODE},
                #{item.CHALLENGE_ID},
                #{item.CHALLENGE_MINUTES},
                #{item.LEVEL},
                #{item.STATUS},
                #{item.START_AT},
                #{item.FINISH_AT},
                #{item.GOLD_TO_SUCCESS},
                #{item.CANCELED_AT},
                #{item.COMPLETED_AT},
                #{item.COLLECT_GOLD},
                #{item.IS_CHALLENGE_SUCCESS},
                #{item.AWARD_TYPE},
                #{item.AWARD_CURRENCY},
                #{item.AWARDED_MONEY},
                #{item.CREATED_AT}
            )
        </foreach>

    </insert>

    <insert id="insertSpinandgoldChallengeHistory" parameterType="java.util.List">
        insert IGNORE into spinandgold_challenge_history
        (
        gp_id,
        nick_name,
        brand_id,
        country_code,
        challenge_id,
        challenge_minutes,
        level,
        status,
        start_at,
        finish_at,
        gold_to_success,
        canceled_at,
        completed_at,
        collect_gold,
        is_challenge_success,
        award_type,
        award_currency,
        awarded_money,
        created_at
        ) values
        <foreach item="item" index="index" separator="," collection="list">
            (
            #{item.GP_ID},
            #{item.NICK_NAME},
            #{item.BRAND_ID},
            #{item.COUNTRY_CODE},
            #{item.CHALLENGE_ID},
            #{item.CHALLENGE_MINUTES},
            #{item.LEVEL},
            #{item.STATUS},
            #{item.START_AT},
            #{item.FINISH_AT},
            #{item.GOLD_TO_SUCCESS},
            #{item.CANCELED_AT},
            #{item.COMPLETED_AT},
            #{item.COLLECT_GOLD},
            #{item.IS_CHALLENGE_SUCCESS},
            #{item.AWARD_TYPE},
            #{item.AWARD_CURRENCY},
            #{item.AWARDED_MONEY},
            #{item.CREATED_AT}
            )
        </foreach>

    </insert>

    <insert id="insertHudBoxTourneyRecentGame" parameterType="java.util.HashMap">
        insert IGNORE into ${tableName}
        (
            tourney_id,
            gp_id,
            end_time,
            award_amount,
            final_rank,
            registered_players,
            final_table,
            in_the_money,
            dealt,
            currency
        ) values
        <foreach item="item" index="index" separator="," collection="dataList">
            (
                #{item.TOURNEY_ID},
                #{item.GP_ID},
                #{item.END_TIME},
                #{item.AWARD_AMOUNT},
                #{item.FINAL_RANK},
                #{item.REGISTERED_PLAYERS},
                #{item.FINAL_TABLE},
                #{item.IN_THE_MONEY},
                #{item.DEALT},
                #{item.CURRENCY}
            )
        </foreach>
    </insert>

    <insert id="insertHudBoxAofHandStatistics"  parameterType="java.util.HashMap">
        insert IGNORE into ${tableName}
        (
        gp_id,
        hand_history_id,
        timestamp,
        game_type,
        currency,
        hand_type,
        winner
        ) values
        <foreach item="item" index="index" separator="," collection="dataList">
            (
            #{item.GP_ID},
            #{item.HAND_HISTORY_ID},
            #{item.TIMESTAMP},
            #{item.GAME_TYPE},
            #{item.CURRENCY},
            #{item.HAND_TYPE},
            #{item.WINNER}
            )
        </foreach>
    </insert>

    <insert id="insertTimelineList" parameterType="java.util.HashMap">
        insert IGNORE into ${tableName}
        (
        gp_id,
        main_type,
        sub_type,
        timestamp,
        content,
        user_text,
        etc_key
        ) values
        <foreach item="item" index="index" separator="," collection="dataList">
            (
            #{item.GP_ID},
            #{item.MAIN_TYPE},
            #{item.SUB_TYPE},
            #{item.TIMESTAMP},
            #{item.CONTENT},
            #{item.USER_TEXT},
            #{item.ETC_KEY}
            )
        </foreach>

    </insert>

    <insert id="insertTourneyInformation" parameterType="java.util.List">
        insert IGNORE into tourney_information
        (
            tourney_id,
            tourney_type,
            award_type,
            play_type,
            game_limit_type,
            game_type,
            is_allow_money_add_on,
            is_allow_money_buy_in,
            is_allow_money_rebuy,
            is_allow_tdollar_add_on,
            is_allow_tdollar_buy_in,
            is_allow_tdollar_rebuy,
            is_allow_satellite_add_on,
            is_allow_satellite_buy_in,
            is_allow_satellite_rebuy,
            is_allow_ticket_add_on,
            is_allow_ticket_buy_in,
            is_allow_ticket_rebuy,
            is_bounty,
            is_canceled_by_crm,
            is_force_complete,
            is_main_event,
            is_only_ticket,
            is_private,
            is_satellite,
            status,
            name,
            brand_name,
            event_number,
            buy_in,
            entrance_fee,
            bounty_amount,
            guaranteed,
            guaranteed_ticket_count,
            guaranteed_ticket_value,
            cash_prize,
            current_bounty_prize_pool,
            current_regular_prize_pool,
            current_total_prize_pool,
            pay_out_type,
            announcement_time,
            registration_time,
            late_registration_time,
            start_time,
            end_time,
            timestamp,
            registered_players,
            start_players_count,
            starting_chips,
            rendering_parameters,
            register_policy,
            max_entry_per_user,
            table_players_count,
            final_table_players_count,
            min_players_count,
            max_players_count,
            settlement_type,
            currency,
            fortune_spin_multiplier,
            fortune_spin_type_index,
            rebuy_count,
            rebuy_amount,
            rebuy_fee,
            rebuy_chips,
            rebuy_period_level,
            second_rebuy_level,
            second_rebuy_amount,
            second_rebuy_fee,
            second_rebuy_chips,
            add_on_amount,
            add_on_fee,
            add_on_chips,
            break_type,
            break_level,
            break_term,
            break_duration,
            is_add_on_break_start,
            is_add_on_break_complete,
            add_on_break_every_min,
            add_on_break_duration_sec,
            synchronized_break_times,
            bounty_to_balance_rate,
            bounty_to_bounty_rate,
            spin_and_gold_multiplier,
            additional_prizes_value,
            integrated_buy_in,
            integrated_entrance_fee,
            integrated_bounty_amount
        ) values
        <foreach item="item" index="index" separator="," collection="list">
            (
                #{item.tourney_id},
                #{item.tourney_type},
                #{item.award_type},
                #{item.play_type},
                #{item.game_limit_type},
                #{item.game_type},
                #{item.is_allow_money_add_on},
                #{item.is_allow_money_buy_in},
                #{item.is_allow_money_rebuy},
                #{item.is_allow_tdollar_add_on},
                #{item.is_allow_tdollar_buy_in},
                #{item.is_allow_tdollar_rebuy},
                #{item.is_allow_satellite_add_on},
                #{item.is_allow_satellite_buy_in},
                #{item.is_allow_satellite_rebuy},
                #{item.is_allow_ticket_add_on},
                #{item.is_allow_ticket_buy_in},
                #{item.is_allow_ticket_rebuy},
                #{item.is_bounty},
                #{item.is_canceled_by_crm},
                #{item.is_force_complete},
                #{item.is_main_event},
                #{item.is_only_ticket},
                #{item.is_private},
                #{item.is_satellite},
                #{item.status},
                #{item.name},
                #{item.brand_name},
                #{item.event_number},
                #{item.buy_in},
                #{item.entrance_fee},
                #{item.bounty_amount},
                #{item.guaranteed},
                #{item.guaranteed_ticket_count},
                #{item.guaranteed_ticket_value},
                #{item.cash_prize},
                #{item.current_bounty_prize_pool},
                #{item.current_regular_prize_pool},
                #{item.current_total_prize_pool},
                #{item.pay_out_type},
                #{item.announcement_time},
                #{item.registration_time},
                #{item.late_registration_time},
                #{item.start_time},
                #{item.end_time},
                #{item.timestamp},
                #{item.registered_players},
                #{item.start_players_count},
                #{item.starting_chips},
                #{item.rendering_parameters},
                #{item.register_policy},
                #{item.max_entry_per_user},
                #{item.table_players_count},
                #{item.final_table_players_count},
                #{item.min_players_count},
                #{item.max_players_count},
                #{item.settlement_type},
                #{item.currency},
                #{item.fortune_spin_multiplier},
                #{item.fortune_spin_type_index},
                #{item.rebuy_count},
                #{item.rebuy_amount},
                #{item.rebuy_fee},
                #{item.rebuy_chips},
                #{item.rebuy_period_level},
                #{item.second_rebuy_level},
                #{item.second_rebuy_amount},
                #{item.second_rebuy_fee},
                #{item.second_rebuy_chips},
                #{item.add_on_amount},
                #{item.add_on_fee},
                #{item.add_on_chips},
                #{item.break_type},
                #{item.break_level},
                #{item.break_term},
                #{item.break_duration},
                #{item.is_add_on_break_start},
                #{item.is_add_on_break_complete},
                #{item.add_on_break_every_min},
                #{item.add_on_break_duration_sec},
                #{item.synchronized_break_times},
                #{item.bounty_to_balance_rate},
                #{item.bounty_to_bounty_rate},
                #{item.spin_and_gold_multiplier},
                #{item.additional_prizes_value},
                #{item.integrated_buy_in},
                #{item.integrated_entrance_fee},
                #{item.integrated_bounty_amount}
            )
        </foreach>

    </insert>

    <insert id="insertWinLossOpponentBestWorstHand" parameterType="java.util.HashMap">
        insert IGNORE into win_loss_opponent_best_worst_hand_pn
        (
            winloss_id,
            target_gp_id,
            opponent_gp_id,
            game_kind,
            currency,
            bone_hand_history_id,
            bone_amount_without_rake,
            bone_integrated_amount_without_rake,
            bone_timestamp,
            bone_target_hole_cards,
            bone_opponent_hole_cards,
            btwo_hand_history_id,
            btwo_amount_without_rake,
            btwo_integrated_amount_without_rake,
            btwo_timestamp,
            btwo_target_hole_cards,
            btwo_opponent_hole_cards,
            bthree_hand_history_id,
            bthree_amount_without_rake,
            bthree_integrated_amount_without_rake,
            bthree_timestamp,
            bthree_target_hole_cards,
            bthree_opponent_hole_cards,
            wone_hand_history_id,
            wone_amount_without_rake,
            wone_integrated_amount_without_rake,
            wone_timestamp,
            wone_target_hole_cards,
            wone_opponent_hole_cards,
            wtwo_hand_history_id,
            wtwo_amount_without_rake,
            wtwo_integrated_amount_without_rake,
            wtwo_timestamp,
            wtwo_target_hole_cards,
            wtwo_opponent_hole_cards,
            wthree_hand_history_id,
            wthree_amount_without_rake,
            wthree_integrated_amount_without_rake,
            wthree_timestamp,
            wthree_target_hole_cards,
            wthree_opponent_hole_cards
        ) values
        <if test="dataList != null">
            <foreach item="item" index="index" separator="," collection="dataList">
            (
                #{item.winloss_id},
                #{item.target_gp_id},
                #{item.opponent_gp_id},
                #{item.game_kind},
                #{item.currency},
                #{item.bone_hand_history_id},
                #{item.bone_amount_without_rake},
                #{item.bone_integrated_amount_without_rake},
                #{item.bone_timestamp},
                #{item.bone_target_hole_cards},
                #{item.bone_opponent_hole_cards},
                #{item.btwo_hand_history_id},
                #{item.btwo_amount_without_rake},
                #{item.btwo_integrated_amount_without_rake},
                #{item.btwo_timestamp},
                #{item.btwo_target_hole_cards},
                #{item.btwo_opponent_hole_cards},
                #{item.bthree_hand_history_id},
                #{item.bthree_amount_without_rake},
                #{item.bthree_integrated_amount_without_rake},
                #{item.bthree_timestamp},
                #{item.bthree_target_hole_cards},
                #{item.bthree_opponent_hole_cards},
                #{item.wone_hand_history_id},
                #{item.wone_amount_without_rake},
                #{item.wone_integrated_amount_without_rake},
                #{item.wone_timestamp},
                #{item.wone_target_hole_cards},
                #{item.wone_opponent_hole_cards},
                #{item.wtwo_hand_history_id},
                #{item.wtwo_amount_without_rake},
                #{item.wtwo_integrated_amount_without_rake},
                #{item.wtwo_timestamp},
                #{item.wtwo_target_hole_cards},
                #{item.wtwo_opponent_hole_cards},
                #{item.wthree_hand_history_id},
                #{item.wthree_amount_without_rake},
                #{item.wthree_integrated_amount_without_rake},
                #{item.wthree_timestamp},
                #{item.wthree_target_hole_cards},
                #{item.wthree_opponent_hole_cards}
            )
            </foreach>
        </if>
    </insert>

    <insert id="insertTourneyPlayerStackHistory" parameterType="java.util.List">
        insert IGNORE into tourney_player_stack_history
        (
            gp_id,
            game_kind,
            tourney_id,
            session_id,
            hand_history_id,
            timestamp,
            nickname,
            tourney_level,
            mandatory_straddle,
            button_blind,
            small_blind,
            big_blind,
            third_blind,
            start_amount,
            amount,
            integrated_start_amount,
            integrated_amount,
            currency
        ) values
        <foreach item="item" index="index" separator="," collection="list">
            (
                #{item.gpId},
                #{item.gameKind},
                #{item.tourneyId},
                #{item.sessionId},
                #{item.handHistoryId},
                #{item.timestamp},
                #{item.nickName},
                #{item.tourneyLevel},
                #{item.mandatoryStraddle},
                #{item.buttonBlind},
                #{item.smallBlind},
                #{item.bigBlind},
                #{item.thirdBlind},
                #{item.startAmount},
                #{item.amount},
                #{item.integrated_start_amount},
                #{item.integrated_amount},
                #{item.currencyString}
            )
        </foreach>

    </insert>

    <insert id="insertTourneyStackSummaryHistory" parameterType="java.util.List">
        insert IGNORE into tourney_stack_summary_history
        (
        tourney_id,
        timestamp,
        tourney_level,
        small_blind,
        big_blind,
        max_amount,
        average_amount,
        player_count
        ) values
        <foreach item="item" index="index" separator="," collection="list">
            (
            #{item.tourneyId},
            #{item.timestamp},
            #{item.tourneyLevel},
            #{item.smallBlind},
            #{item.bigBlind},
            #{item.maxAmount},
            #{item.avgAmount},
            #{item.playerCount}
            )
        </foreach>

    </insert>

    <update id="insertWinlossHoleCardDaily" parameterType="java.util.HashMap" >
        insert into win_loss_holecard_day
        select
            day_number,
            type,
            gp_id,
            session_id,
            hole_cards_string,
            game_kind,
            game_buy_in_type,
            game_limit_type,
            game_type,
            play_type,
            ante,
            mandatory_straddle,
            button_blind,
            small_blind,
            big_blind,
            third_blind,
            currency,
            sum(rake) as rake,
            sum(contributed_rake) as contributed_rake,
            sum(contributed_amount) as contributed_amount,
            sum(dead_chip) as dead_chip,
            sum(earned_amount) as earned_amount,
            sum(earned_amount_without_rake) as earned_amount_without_rake,
            sum(profit_amount) as profit_amount,
            sum(profit_amount_without_rake) as profit_amount_without_rake,
            sum(pot_amount) as pot_amount,
            sum(expected_value) as expected_value,
            sum(integrated_rake) as integrated_rake,
            sum(integrated_contributed_rake) as integrated_contributed_rake,
            sum(integrated_contributed_amount) as integrated_contributed_amount,
            sum(integrated_dead_chip) as integrated_dead_chip,
            sum(integrated_earned_amount) as integrated_earned_amount,
            sum(integrated_earned_amount_without_rake) as integrated_earned_amount_without_rake,
            sum(integrated_profit_amount) as integrated_profit_amount,
            sum(integrated_profit_amount_without_rake) as integrated_profit_amount_without_rake,
            sum(integrated_pot_amount) as integrated_pot_amount,
            sum(integrated_expected_value) as integrated_expected_value,
            sum(if(last_state > 1, 1, 0)) as flop_count, -- check
            sum(if(has_show_down = 1, 1, 0)) as show_down_count,
            sum(1) as hand_count,
            sum(if(is_all_in = 1, 1, 0)) as all_in_count,
            sum(win_count) as win_count,
            sum(tie_count) as tie_count,
            sum(loss_count) as loss_count
        from win_loss_hand
        where day_number = #{dayNumber} and game_kind = ${gameKind}
        group by day_number, gp_id, type, hole_cards_string
        order by day_number, gp_id, type, hole_cards_string
        limit #{offset}, #{limit}

    </update>

    <select id="getSessionList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        select
            #{gpIdStart} as gpIdStart,
            day_number as dayNumber,
            gp_id as gpId,
            type,
            session_id as sessionId,
            #{limit} as limit
        from win_loss_hand
        where gp_id like #{gpIdStart} || '%'
        and (day_number, gp_id, type, session_id ) > (#{dayNumber}, #{gpId}, '1', #{sessionId})
        group by day_number, gp_id, type, session_id
        order by day_number, gp_id, type, session_id
        limit #{limit}
    </select>

    <insert id="insertWinlossSession" parameterType="java.util.HashMap">
        insert into win_loss_session
        (...)
        select
            day_number                                        AS day_number,
            type                                              AS type,
            gp_id                                             AS gp_id,
            session_id                                        AS session_id,
            MAX(win_loss_hand_id)                             AS win_loss_hand_id,
            MAX(game_kind)                                    AS game_kind,
            MAX(game_buy_in_type)                             AS game_buy_in_type,
            MAX(game_limit_type)                              AS game_limit_type,
            MAX(game_type)                                    AS game_type,
            MAX(play_type)                                    AS play_type,
            MAX(ante)                                         AS ante,
            MAX(mandatory_straddle)                           AS mandatory_straddle,
            MAX(button_blind)                                 AS button_blind,
            MAX(small_blind)                                  AS small_blind,
            MAX(big_blind)                                    AS big_blind,
            MAX(third_blind)                                  AS third_blind,
            MAX(currency)                                     AS currency,
            MAX(max_buy_in)                                   AS max_buy_in,
            MAX(min_buy_in)                                   AS min_buy_in,
            MAX(default_buy_in)                               AS default_buy_in,
            MIN(timestamp)                                    AS min_timestamp,
            MAX(timestamp)                                    AS max_timestamp,
            MAX(table_id)                                     AS table_id,
            MAX(table_name)                                   AS table_name,
            MAX(tourney_id)                                   AS tourney_id,
            MAX(tourney_name)                                 AS tourney_name,
            MAX(is_private)                                   AS is_private,
            MAX(is_vip_room)                                  AS is_vip_room,
            SUM(contributed_amount)                           AS contributed_amount,
            SUM(earned_amount_without_rake)                   AS earned_amount_without_rake,
            SUM(profit_amount_without_rake)                   AS profit_amount_without_rake,
            SUM(pot_amount)                                   AS pot_amount,
            SUM(integrated_contributed_amount)                AS integrated_contributed_amount,
            SUM(integrated_earned_amount_without_rake)        AS integrated_earned_amount_without_rake,
            SUM(integrated_profit_amount_without_rake)        AS integrated_profit_amount_without_rake,
            SUM(integrated_pot_amount)                        AS integrated_pot_amount,
            COUNT(hand_history_id)                            AS hand_count
        from win_loss_hand
        where (day_number, gp_id, type, session_id) in (
            <foreach collection="list" item="item" separator="," open="(" close=")">
                #{dayNumber}, #{gpId}, #{type}, #{sessionId}
            </foreach>
        )

    </insert>

    <insert id="mergeWinlossSession" parameterType="java.util.HashMap">
        insert into win_loss_session (
            day_number,
            type,
            gp_id,
            session_id,
            game_kind,
            game_buy_in_type,
            game_limit_type,
            game_type,
            play_type,
            ante,
            mandatory_straddle,
            button_blind,
            small_blind,
            big_blind,
            third_blind,
            currency,
            max_buy_in,
            min_buy_in,
            default_buy_in,
            min_timestamp,
            max_timestamp,
            table_id,
            table_name,
            tourney_id,
            tourney_name,
            is_private,
            is_vip_room,
            contributed_amount,
            earned_amount_without_rake,
            profit_amount_without_rake,
            pot_amount,
            integrated_contributed_amount,
            integrated_earned_amount_without_rake,
            integrated_profit_amount_without_rake,
            integrated_pot_amount,
            hand_count
        )
        select
            day_number                                        AS day_number,
            type                                              AS type,
            gp_id                                             AS gp_id,
            session_id                                        AS session_id,
            MAX(game_kind)                                    AS game_kind,
            MAX(game_buy_in_type)                             AS game_buy_in_type,
            MAX(game_limit_type)                              AS game_limit_type,
            MAX(game_type)                                    AS game_type,
            MAX(play_type)                                    AS play_type,
            MAX(ante)                                         AS ante,
            MAX(mandatory_straddle)                           AS mandatory_straddle,
            MAX(button_blind)                                 AS button_blind,
            MAX(small_blind)                                  AS small_blind,
            MAX(big_blind)                                    AS big_blind,
            MAX(third_blind)                                  AS third_blind,
            MAX(currency)                                     AS currency,
            MAX(max_buy_in)                                   AS max_buy_in,
            MAX(min_buy_in)                                   AS min_buy_in,
            MAX(default_buy_in)                               AS default_buy_in,
            MIN(timestamp)                                    AS min_timestamp,
            MAX(timestamp)                                    AS max_timestamp,
            MAX(table_id)                                     AS table_id,
            MAX(table_name)                                   AS table_name,
            MAX(tourney_id)                                   AS tourney_id,
            MAX(tourney_name)                                 AS tourney_name,
            MAX(is_private)                                   AS is_private,
            MAX(is_vip_room)                                  AS is_vip_room,
            SUM(contributed_amount)                           AS contributed_amount,
            SUM(earned_amount_without_rake)                   AS earned_amount_without_rake,
            SUM(profit_amount_without_rake)                   AS profit_amount_without_rake,
            SUM(pot_amount)                                   AS pot_amount,
            SUM(integrated_contributed_amount)                AS integrated_contributed_amount,
            SUM(integrated_earned_amount_without_rake)        AS integrated_earned_amount_without_rake,
            SUM(integrated_profit_amount_without_rake)        AS integrated_profit_amount_without_rake,
            SUM(integrated_pot_amount)                        AS integrated_pot_amount,
            COUNT(hand_history_id)                            AS hand_count
        from win_loss_hand
        where win_loss_hand_id between #{startWinLossHandId} and #{endWinLossHandId}
        group by gp_id, type, session_id, day_number
        on DUPLICATE KEY UPDATE
        min_timestamp = LEAST(min_timestamp, VALUES(min_timestamp)),
        max_timestamp = GREATEST(max_timestamp, VALUES(max_timestamp)),
        contributed_amount = contributed_amount + VALUES(contributed_amount),
        earned_amount_without_rake = earned_amount_without_rake + VALUES(earned_amount_without_rake),
        profit_amount_without_rake = profit_amount_without_rake + VALUES(profit_amount_without_rake),
        pot_amount = pot_amount + VALUES(pot_amount),
        integrated_contributed_amount = integrated_contributed_amount + VALUES(integrated_contributed_amount),
        integrated_earned_amount_without_rake = integrated_earned_amount_without_rake + VALUES(integrated_earned_amount_without_rake),
        integrated_profit_amount_without_rake = integrated_profit_amount_without_rake + VALUES(integrated_profit_amount_without_rake),
        integrated_pot_amount = integrated_pot_amount + VALUES(integrated_pot_amount),
        hand_count = hand_count + VALUES(hand_count)

    </insert>

    <insert id="mergeWinlossHolecard" parameterType="java.util.HashMap">

        INSERT INTO win_loss_holecard (
            day_number,
            type,
            gp_id,
            session_id,
            hole_cards_string,
            game_kind,
            game_buy_in_type,
            game_limit_type,
            game_type,
            play_type,
            ante,
            mandatory_straddle,
            button_blind,
            small_blind,
            big_blind,
            third_blind,
            currency,
            rake,
            contributed_rake,
            contributed_amount,
            dead_chip,
            earned_amount,
            earned_amount_without_rake,
            profit_amount,
            profit_amount_without_rake,
            pot_amount,
            expected_value,
            integrated_rake,
            integrated_contributed_rake,
            integrated_contributed_amount,
            integrated_dead_chip,
            integrated_earned_amount,
            integrated_earned_amount_without_rake,
            integrated_profit_amount,
            integrated_profit_amount_without_rake,
            integrated_pot_amount,
            integrated_expected_value,
            flop_count,
            show_down_count,
            hand_count,
            all_in_count,
            win_count,
            tie_count,
            loss_count
            )
            select
                day_number,
                type,
                gp_id,
                session_id,
                hole_cards_string,
                game_kind,
                game_buy_in_type,
                game_limit_type,
                game_type,
                play_type,
                ante,
                mandatory_straddle,
                button_blind,
                small_blind,
                big_blind,
                third_blind,
                currency,
                sum(rake) as rake,
                sum(contributed_rake) as contributed_rake,
                sum(contributed_amount) as contributed_amount,
                sum(dead_chip) as dead_chip,
                sum(earned_amount) as earned_amount,
                sum(earned_amount_without_rake) as earned_amount_without_rake,
                sum(profit_amount) as profit_amount,
                sum(profit_amount_without_rake) as profit_amount_without_rake,
                sum(pot_amount) as pot_amount,
                sum(if(expected_value != 0 and has_show_down=1, expected_value, profit_amount_without_rake)) as expected_value,
                sum(integrated_rake) as integrated_rake,
                sum(integrated_contributed_rake) as integrated_contributed_rake,
                sum(integrated_contributed_amount) as integrated_contributed_amount,
                sum(integrated_dead_chip) as integrated_dead_chip,
                sum(integrated_earned_amount) as integrated_earned_amount,
                sum(integrated_earned_amount_without_rake) as integrated_earned_amount_without_rake,
                sum(integrated_profit_amount) as integrated_profit_amount,
                sum(integrated_profit_amount_without_rake) as integrated_profit_amount_without_rake,
                sum(integrated_pot_amount) as integrated_pot_amount,
                sum(if(integrated_expected_value != 0 and has_show_down=1, integrated_expected_value, profit_amount_without_rake)) as integrated_expected_value,
                sum(if(last_state > 1, 1, 0)) as flop_count,
                sum(if(has_show_down=1,1,0)) as show_down_count,
                sum(1) as hand_count,
                sum(if(is_all_in=1,1,0)) as all_in_count,
                sum(win_count) as win_count,
                sum(tie_count) as tie_count,
                sum(loss_count) as loss_count
            from win_loss_hand
            where win_loss_hand_id between #{startWinLossHandId} and #{endWinLossHandId}
            group by gp_id, type, session_id, hole_cards_string, day_number
        ON DUPLICATE KEY UPDATE
        rake = rake + VALUES(rake),
        contributed_rake = contributed_rake + VALUES(contributed_rake),
        contributed_amount = contributed_amount + VALUES(contributed_amount),
        dead_chip = dead_chip + VALUES(dead_chip),
        earned_amount = earned_amount + VALUES(earned_amount),
        earned_amount_without_rake = earned_amount_without_rake + VALUES(earned_amount_without_rake),
        profit_amount = profit_amount + VALUES(profit_amount),
        profit_amount_without_rake = profit_amount_without_rake + VALUES(profit_amount_without_rake),
        pot_amount = pot_amount + VALUES(pot_amount),
        expected_value = expected_value + VALUES(expected_value),
        integrated_rake = integrated_rake + VALUES(integrated_rake),
        integrated_contributed_rake = integrated_contributed_rake + VALUES(integrated_contributed_rake),
        integrated_contributed_amount = integrated_contributed_amount + VALUES(integrated_contributed_amount),
        integrated_dead_chip = integrated_dead_chip + VALUES(integrated_dead_chip),
        integrated_earned_amount = integrated_earned_amount + VALUES(integrated_earned_amount),
        integrated_earned_amount_without_rake = integrated_earned_amount_without_rake + VALUES(integrated_earned_amount_without_rake),
        integrated_profit_amount = integrated_profit_amount + VALUES(integrated_profit_amount),
        integrated_profit_amount_without_rake = integrated_profit_amount_without_rake + VALUES(integrated_profit_amount_without_rake),
        integrated_pot_amount = integrated_pot_amount + VALUES(integrated_pot_amount),
        integrated_expected_value = integrated_expected_value + VALUES(integrated_expected_value),
        flop_count = flop_count + VALUES(flop_count),
        show_down_count = show_down_count + VALUES(show_down_count),
        hand_count = hand_count + VALUES(hand_count),
        all_in_count = all_in_count + VALUES(all_in_count),
        win_count = win_count + VALUES(win_count),
        tie_count = tie_count + VALUES(tie_count),
        loss_count = loss_count + VALUES(loss_count)
    </insert>

    <insert id="mergeWinlossPosition" parameterType="java.util.HashMap">
        INSERT INTO win_loss_position (
            day_number,
            type,
            gp_id,
            session_id,
            seat_position,
            game_kind,
            game_buy_in_type,
            game_limit_type,
            game_type,
            play_type,
            ante,
            mandatory_straddle,
            button_blind,
            small_blind,
            big_blind,
            third_blind,
            currency,
            rake,
            contributed_rake,
            contributed_amount,
            dead_chip,
            earned_amount,
            earned_amount_without_rake,
            profit_amount,
            profit_amount_without_rake,
            pot_amount,
            expected_value,
            integrated_rake,
            integrated_contributed_rake,
            integrated_contributed_amount,
            integrated_dead_chip,
            integrated_earned_amount,
            integrated_earned_amount_without_rake,
            integrated_profit_amount,
            integrated_profit_amount_without_rake,
            integrated_pot_amount,
            integrated_expected_value,
            flop_count,
            show_down_count,
            hand_count,
            all_in_count,
            win_count,
            tie_count,
            loss_count
            )
            select
                day_number,
                type,
                gp_id,
                session_id,
                seat_position,
                game_kind,
                game_buy_in_type,
                game_limit_type,
                game_type,
                play_type,
                ante,
                mandatory_straddle,
                button_blind,
                small_blind,
                big_blind,
                third_blind,
                currency,
                sum(rake) as rake,
                sum(contributed_rake) as contributed_rake,
                sum(contributed_amount) as contributed_amount,
                sum(dead_chip) as dead_chip,
                sum(earned_amount) as earned_amount,
                sum(earned_amount_without_rake) as earned_amount_without_rake,
                sum(profit_amount) as profit_amount,
                sum(profit_amount_without_rake) as profit_amount_without_rake,
                sum(pot_amount) as pot_amount,
                sum(if(expected_value != 0 and has_show_down=1, expected_value, profit_amount_without_rake)) as expected_value,
                sum(integrated_rake) as integrated_rake,
                sum(integrated_contributed_rake) as integrated_contributed_rake,
                sum(integrated_contributed_amount) as integrated_contributed_amount,
                sum(integrated_dead_chip) as integrated_dead_chip,
                sum(integrated_earned_amount) as integrated_earned_amount,
                sum(integrated_earned_amount_without_rake) as integrated_earned_amount_without_rake,
                sum(integrated_profit_amount) as integrated_profit_amount,
                sum(integrated_profit_amount_without_rake) as integrated_profit_amount_without_rake,
                sum(integrated_pot_amount) as integrated_pot_amount,
                sum(if(integrated_expected_value != 0 and has_show_down=1, integrated_expected_value, profit_amount_without_rake)) as integrated_expected_value,
                sum(if(last_state > 1, 1, 0)) as flop_count,
                sum(if(has_show_down=1,1,0)) as show_down_count,
                sum(1) as hand_count,
                sum(if(is_all_in=1,1,0)) as all_in_count,
                sum(win_count) as win_count,
                sum(tie_count) as tie_count,
                sum(loss_count) as loss_count
            from win_loss_hand
            where win_loss_hand_id between #{startWinLossHandId} and #{endWinLossHandId}
            group by gp_id, type, session_id, seat_position, day_number
            ON DUPLICATE KEY UPDATE
            rake = rake + VALUES(rake),
            contributed_rake = contributed_rake + VALUES(contributed_rake),
            contributed_amount = contributed_amount + VALUES(contributed_amount),
            dead_chip = dead_chip + VALUES(dead_chip),
            earned_amount = earned_amount + VALUES(earned_amount),
            earned_amount_without_rake = earned_amount_without_rake + VALUES(earned_amount_without_rake),
            profit_amount = profit_amount + VALUES(profit_amount),
            profit_amount_without_rake = profit_amount_without_rake + VALUES(profit_amount_without_rake),
            pot_amount = pot_amount + VALUES(pot_amount),
            expected_value = expected_value + VALUES(expected_value),
            integrated_rake = integrated_rake + VALUES(integrated_rake),
            integrated_contributed_rake = integrated_contributed_rake + VALUES(integrated_contributed_rake),
            integrated_contributed_amount = integrated_contributed_amount + VALUES(integrated_contributed_amount),
            integrated_dead_chip = integrated_dead_chip + VALUES(integrated_dead_chip),
            integrated_earned_amount = integrated_earned_amount + VALUES(integrated_earned_amount),
            integrated_earned_amount_without_rake = integrated_earned_amount_without_rake + VALUES(integrated_earned_amount_without_rake),
            integrated_profit_amount = integrated_profit_amount + VALUES(integrated_profit_amount),
            integrated_profit_amount_without_rake = integrated_profit_amount_without_rake + VALUES(integrated_profit_amount_without_rake),
            integrated_pot_amount = integrated_pot_amount + VALUES(integrated_pot_amount),
            integrated_expected_value = integrated_expected_value + VALUES(integrated_expected_value),
            flop_count = flop_count + VALUES(flop_count),
            show_down_count = show_down_count + VALUES(show_down_count),
            hand_count = hand_count + VALUES(hand_count),
            all_in_count = all_in_count + VALUES(all_in_count),
            win_count = win_count + VALUES(win_count),
            tie_count = tie_count + VALUES(tie_count),
            loss_count = loss_count + VALUES(loss_count)
    </insert>

    <select id="selectMaxWinlossHandId" resultType="java.lang.Long">
        select max(win_loss_hand_id) as maxWinLossHandId
        from win_loss_hand
    </select>

    <select id="selectTourneyInfo" parameterType="java.lang.Long" resultType="java.util.HashMap">
        select tourney_id, currency
        from currency_exchange_tourney
        where id = #{id}
    </select>

    <update id="updateExchageRateForTourneyInformation" parameterType="java.util.HashMap">
        update tourney_information
        set
            integrated_buy_in = floor(buy_in * #{exchangeRate}),
            integrated_entrance_fee = floor(entrance_fee * #{exchangeRate}),
            integrated_bounty_amount = floor(bounty_amount * #{exchangeRate})
        where tourney_id = #{tourney_id}
    </update>

    <update id="updateExchageRateForTourneyPlayerResult" parameterType="java.util.HashMap">
        update tourney_player_final_result
        set
            integrated_award_amount = floor(award_amount * #{exchangeRate}),
            integrated_bounty_prize = floor(bounty_prize * #{exchangeRate})
        where tourney_id = #{tourney_id}
    </update>

    <update id="updateExchageRateForTourneyStakingInfo" parameterType="java.util.HashMap">
        update tourney_staking_info
        set
            integrated_profit = floor(profit * #{exchangeRate})
        where tourney_id = #{tourney_id}
    </update>

    <update id="updateExchageRateForTourneyStakingAction" parameterType="java.util.HashMap">
        update tourney_staking_action
        set
            integrated_amount = floor(amount * #{exchangeRate}),
            integrated_reward = floor(reward * #{exchangeRate})
        where tourney_id = #{tourney_id}
    </update>



</mapper>